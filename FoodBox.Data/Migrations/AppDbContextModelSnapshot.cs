// <auto-generated />
using System;
using FoodBox.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodBox.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FoodBox.Entity.Entities.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a780b1c8-6d4b-452d-9bc4-40f184964380"),
                            ConcurrencyStamp = "effbcbfb-9c10-46ca-bffc-7156658e1c0c",
                            Name = "Superadmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = new Guid("c457729b-87e5-4d96-9965-eefb8e36a203"),
                            ConcurrencyStamp = "5fa9b80e-6af4-443e-9d59-9fc36c01b30b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("855b21a0-2a28-4c07-a6f4-6fc5392b30a6"),
                            ConcurrencyStamp = "40491b97-82fb-41d2-b307-96a826ecb3f4",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.AppRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StoreId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e6c8d1cd-1b18-473a-b68a-7b3cb247307d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "509edcf0-df09-4594-8c69-2a73963c7455",
                            Email = "superadmin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Yaprak",
                            LastName = "Yildirim",
                            LockoutEnabled = false,
                            NormalizedEmail = "SUPERADMIN@GMAIL.COM",
                            NormalizedUserName = "SUPERADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEA7ZgCzRzmUs7xUXstBOafwX6KmlrVs6Its57e64g9acUHYBuQSTU/Dy80nAecPjnQ==",
                            PhoneNumber = "+905423897485",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "12dffc79-a454-43a6-9b5b-bcb78146f9c0",
                            StoreId = new Guid("c9cc4f4e-39ee-46c9-b5a6-fcb2674c71c8"),
                            TwoFactorEnabled = false,
                            UserName = "superadmin@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("4f3d95f2-ad3e-4172-9b35-3d80ecfd0624"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "403a20f3-26bb-47e0-bd9c-e52b02ac708b",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDjdWvxgn5p1JqtTJLbU4sl4PriqDwPwUgggY+z4o0/rfmg3WvUntmw3vdaK6ts7Cg==",
                            PhoneNumber = "+905423891212",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ada9c24-a912-4490-9971-11d39ce875c9",
                            StoreId = new Guid("40888f2b-9891-4fa4-abb2-993e4682fd0b"),
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        });
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.AppUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.AppUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.AppUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("e6c8d1cd-1b18-473a-b68a-7b3cb247307d"),
                            RoleId = new Guid("a780b1c8-6d4b-452d-9bc4-40f184964380")
                        },
                        new
                        {
                            UserId = new Guid("4f3d95f2-ad3e-4172-9b35-3d80ecfd0624"),
                            RoleId = new Guid("c457729b-87e5-4d96-9965-eefb8e36a203")
                        });
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.AppUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cf794b4b-ddf3-4dc4-9905-5ad6adfb9cd5"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 3, 30, 13, 55, 18, 212, DateTimeKind.Local).AddTicks(6349),
                            IsDeleted = false,
                            Name = "Çikolata"
                        },
                        new
                        {
                            Id = new Guid("19aa3e6c-b4aa-4e53-998b-dbf0a5750512"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 3, 30, 13, 55, 18, 212, DateTimeKind.Local).AddTicks(6357),
                            IsDeleted = false,
                            Name = "Gofret"
                        });
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductCode")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<Guid?>("StoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("User")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StoreId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3bcac82f-8334-4697-ab39-ce8cf1e30500"),
                            Brand = "Ülker",
                            CategoryId = new Guid("cf794b4b-ddf3-4dc4-9905-5ad6adfb9cd5"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 3, 30, 13, 55, 18, 212, DateTimeKind.Local).AddTicks(6488),
                            IsDeleted = false,
                            ProductCode = 1,
                            ProductName = "Coko",
                            Stock = 90,
                            StoreId = new Guid("c9cc4f4e-39ee-46c9-b5a6-fcb2674c71c8"),
                            User = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("e6c8d1cd-1b18-473a-b68a-7b3cb247307d")
                        },
                        new
                        {
                            Id = new Guid("46d49e0d-b1d8-4106-aba4-0fd2c4f3f4a0"),
                            Brand = "Torku",
                            CategoryId = new Guid("19aa3e6c-b4aa-4e53-998b-dbf0a5750512"),
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 3, 30, 13, 55, 18, 212, DateTimeKind.Local).AddTicks(6493),
                            IsDeleted = false,
                            ProductCode = 2,
                            ProductName = "Puskevit",
                            Stock = 80,
                            StoreId = new Guid("40888f2b-9891-4fa4-abb2-993e4682fd0b"),
                            User = new Guid("00000000-0000-0000-0000-000000000000"),
                            UserId = new Guid("4f3d95f2-ad3e-4172-9b35-3d80ecfd0624")
                        });
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.Store", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9cc4f4e-39ee-46c9-b5a6-fcb2674c71c8"),
                            Address = "Kartal Atalar mah",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 3, 30, 13, 55, 18, 213, DateTimeKind.Local).AddTicks(440),
                            IsDeleted = false,
                            Phone = 216145,
                            StoreName = "Kartal"
                        },
                        new
                        {
                            Id = new Guid("40888f2b-9891-4fa4-abb2-993e4682fd0b"),
                            Address = "Pendik Dogu mah",
                            CreatedBy = "Admin Test",
                            CreatedDate = new DateTime(2023, 3, 30, 13, 55, 18, 213, DateTimeKind.Local).AddTicks(443),
                            IsDeleted = false,
                            Phone = 316145,
                            StoreName = "Pendik"
                        });
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.AppRoleClaim", b =>
                {
                    b.HasOne("FoodBox.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.AppUser", b =>
                {
                    b.HasOne("FoodBox.Entity.Entities.Store", "Store")
                        .WithMany("AppUsers")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.AppUserClaim", b =>
                {
                    b.HasOne("FoodBox.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.AppUserLogin", b =>
                {
                    b.HasOne("FoodBox.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.AppUserRole", b =>
                {
                    b.HasOne("FoodBox.Entity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodBox.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.AppUserToken", b =>
                {
                    b.HasOne("FoodBox.Entity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.Product", b =>
                {
                    b.HasOne("FoodBox.Entity.Entities.AppUser", null)
                        .WithMany("Products")
                        .HasForeignKey("AppUserId");

                    b.HasOne("FoodBox.Entity.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodBox.Entity.Entities.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId");

                    b.Navigation("Category");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.AppUser", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FoodBox.Entity.Entities.Store", b =>
                {
                    b.Navigation("AppUsers");

                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
